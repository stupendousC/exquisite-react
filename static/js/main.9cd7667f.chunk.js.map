{"version":3,"sources":["components/PlayerSubmissionForm.js","components/FinalPoem.js","components/RecentSubmission.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["PlayerSubmissionForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","genInputFields","state","sentenceKeys","map","key","i","currValue","sentenceValues","currPlaceholder","sentencePlaceholders","length","react_default","a","createElement","value","name","onChange","onFieldChange","type","placeholder","className","emptyFields","setState","origKeys","origValues","origPlaceholders","event","currKey","target","index","findIndex","updatedSentenceValues","toConsumableArray","getBadFields","badFields","push","joinSentence","values","toJoin","slice","lastWord","sentence","join","onFormSubmit","preventDefault","console","log","lineSubmitCallback","fields","element","currPlayer","onSubmit","Component","FinalPoem","_ref","gameOver","wholePoem","gameOverCallback","newGameCallback","line","onClick","RecentSubmission","prevLine","Game","rotatePlayer","totalPlayerCount","submitLine","currWholePoem","showOrHideRecentSubmission","src_components_RecentSubmission","showOrHidePlayerSubmissionForm","src_components_PlayerSubmissionForm","FIELDS","showCorrectFinalPoemSection","src_components_FinalPoem","Infinity","exampleFormat","field","App","src_components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cd7667f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './PlayerSubmissionForm.css';\nimport PropTypes from 'prop-types';\n\nclass PlayerSubmissionForm extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    // iterate through fields and separate out into sentenceKeys/Values/Placeholders arrays\n    const fields = this.props.fields;\n    let sentenceKeys;\n    let sentenceValues = [];\n    let sentencePlaceholders = [];\n\n    sentenceKeys = fields.map(element => {\n      if (typeof(element) === 'string' ) {\n        // element is something like \"the\" or punctuation\n        sentenceValues.push(element);\n        sentencePlaceholders.push(\"\");\n        return element;\n\n      } else { \n        // element is a hash like { key: 'verb', placeholder: 'verb' }\n        sentenceValues.push(\"\");\n        sentencePlaceholders.push(element.placeholder);\n        return element.key;\n      }\n    });\n    \n    this.state = {\n      sentenceKeys: sentenceKeys,\n      sentenceValues: sentenceValues,\n      sentencePlaceholders: sentencePlaceholders,\n\n      origKeys: sentenceKeys,\n      origValues: sentenceValues,\n      origPlaceholders: sentencePlaceholders,\n    }\n  }\n\n  genInputFields = () => {\n    const validBackground = \"PlayerSubmissionForm__input--valid\";\n    const invalidBackground = \"PlayerSubmissionForm__input--invalid\";\n\n    return (this.state.sentenceKeys.map((key, i) => {\n      const currValue = this.state.sentenceValues[i];\n      const currPlaceholder = this.state.sentencePlaceholders[i];\n\n      if (currPlaceholder === \"\") {\n        // not an active field for user input\n        return currValue;\n      } else if ( currValue.length === 0 ) {\n        return (<input value={currValue} name={key} onChange={this.onFieldChange} type=\"text\" placeholder={currPlaceholder} className={invalidBackground} key={i}/>);\n      } else if ( currValue.length > 0) {\n        return (<input value={currValue} name={key} onChange={this.onFieldChange} type=\"text\" placeholder={currPlaceholder} className={validBackground} key={i}/>);\n      } else {\n        return <h1>Unexpected bug, plz call customer service at 1-800-LOL-OOOPS</h1>\n      }\n  }))}\n\n  emptyFields = () => {\n    // HELPER FCN\n    this.setState ({\n      sentenceKeys: this.state.origKeys,\n      sentenceValues: this.state.origValues,\n      sentencePlaceholders: this.state.origPlaceholders,\n    })\n  }\n\n  onFieldChange = (event) => {\n    const currKey = event.target.name;\n    const value = event.target.value;\n    const index = this.state.sentenceKeys.findIndex(key => key===currKey);\n\n    let updatedSentenceValues = [...this.state.sentenceValues];\n    updatedSentenceValues[index] = value;\n    this.setState({ sentenceValues: updatedSentenceValues });\n  }\n\n  getBadFields = () => {\n    let badFields = [];\n    for (let i = 0; i<this.state.sentenceKeys.length; i++) {\n      if (this.state.sentenceValues[i] === \"\") {\n        badFields.push(this.state.sentenceKeys[i]);\n      }\n    }\n    return ( badFields.length === 0 ? null : badFields );\n  }\n\n  joinSentence = () => {\n    const values = this.state.sentenceValues;\n    const length = values.length;\n    const toJoin = values.slice(0, length-1);\n    const lastWord = values.slice(length-1);\n    let sentence = toJoin.join(\" \");\n    sentence += lastWord[0];\n    \n    return sentence;\n  }\n\n  onFormSubmit = (event) => {\n    event.preventDefault();\n\n    const badFields = this.getBadFields();\n    \n    if (badFields) {\n      console.log(\"MISSING THESE FIELDS:\", badFields);\n      return;\n    } \n\n    const sentence = this.joinSentence();\n    \n    this.emptyFields();\n\n    this.props.lineSubmitCallback(sentence);  \n  }\n\n  render() {\n\n    return (\n      <div className=\"PlayerSubmissionForm\">\n        <h3>Player Submission Form for Player #{ this.props.currPlayer }</h3>\n\n        <form onSubmit={this.onFormSubmit} className=\"PlayerSubmissionForm__form\" >\n\n          <div className=\"PlayerSubmissionForm__poem-inputs\">\n            { this.genInputFields() }\n          </div>\n\n          <div className=\"PlayerSubmissionForm__submit\">\n            <input type=\"submit\" value=\"Submit Line\" className=\"PlayerSubmissionForm__submit-btn\" />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nPlayerSubmissionForm.propTypes = {\n  currPlayer: PropTypes.number.isRequired,\n  lineSubmitCallback: PropTypes.func.isRequired,\n  fields: PropTypes.array,\n}\n\nexport default PlayerSubmissionForm;\n","import React from 'react';\nimport './FinalPoem.css';\nimport PropTypes from 'prop-types';\n\nconst FinalPoem = ({ gameOver, wholePoem, gameOverCallback, newGameCallback }) => {\n\n  const printWholePoem = () => {\n    if (wholePoem) {\n      return (wholePoem.map((line, i)=> {\n        return(<p key={i}>{line}</p>);\n      }));\n    } else {\n      return null;\n    }\n  }\n\n  const showOrHideWholePoem = () => {\n    if (gameOver) {\n      return (\n        <section className=\"FinalPoem__poem\">\n          <h3>Final Poem</h3>\n          {printWholePoem()}\n        </section>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  const showCorrectButton = () => {\n    if (gameOver) {\n      return (<input onClick={newGameCallback} type=\"button\" value=\"Click for New Game!\" className=\"FinalPoem__reveal-btn new-game\" />);\n    } else {\n      return (<input onClick={gameOverCallback} type=\"button\" value=\"We are finished: Reveal the Poem\" className=\"FinalPoem__reveal-btn\" />);\n    }\n  }\n\n  return (\n    <div className=\"FinalPoem\">\n        { showOrHideWholePoem() }\n\n      <div className=\"FinalPoem__reveal-btn-container\">\n        { showCorrectButton() }\n      </div>\n    </div>\n  );\n}\n\nFinalPoem.propTypes = {\n  gameOver: PropTypes.bool.isRequired, \n  wholePoem: PropTypes.array, \n  gameOverCallback: PropTypes.func, \n  newGameCallback: PropTypes.func,\n}\n\nexport default FinalPoem;\n","import React from 'react';\nimport './RecentSubmission.css';\nimport PropTypes from 'prop-types';\n\nconst RecentSubmission = ({prevLine}) => {\n  return (\n    <div className=\"RecentSubmission\">\n      <h3>The Most Recent Submission</h3>\n      <p className=\"RecentSubmission__submission\">{ prevLine }</p>\n    </div>\n  );\n}\n\nRecentSubmission.propTypes = {\n  prevLine: PropTypes.string.isRequired,\n}\n\nexport default RecentSubmission;\n","import React, { Component } from 'react';\nimport './Game.css';\nimport PlayerSubmissionForm from './PlayerSubmissionForm';\nimport FinalPoem from './FinalPoem';\nimport RecentSubmission from './RecentSubmission';\n\nclass Game extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      prevLine: '',\n      wholePoem: [],\n      currPlayer: 1,\n      totalPlayerCount: Infinity,\n      gameOver: false,\n    }\n  }\n\n  rotatePlayer = () => {\n    // HELPER FCN... I prematurely optimized for variable player count\n    if (this.state.currPlayer === this.state.totalPlayerCount) {\n      this.setState({ currPlayer: 1 });\n    } else {\n      this.setState({ currPlayer: this.state.currPlayer + 1 });\n    }\n  }\n\n  submitLine = (line) => {\n    let currWholePoem = [...this.state.wholePoem];\n    currWholePoem.push(line);\n    this.setState({ prevLine: line, wholePoem: currWholePoem });\n    this.rotatePlayer();\n  }\n\n  gameOver = () => {\n    this.setState({ gameOver: true });\n  }\n  \n  showOrHideRecentSubmission = () => {\n    if (this.state.gameOver) {\n      return null;\n    } else if (this.state.prevLine) {\n      return <RecentSubmission prevLine={this.state.prevLine}/>\n    }\n  }\n\n  showOrHidePlayerSubmissionForm = () => {\n    if (this.state.gameOver) {\n      return null;\n    } else {\n      return <PlayerSubmissionForm fields={FIELDS} currPlayer={this.state.currPlayer} lineSubmitCallback={this.submitLine}/>\n    }\n  }\n\n  showCorrectFinalPoemSection = () => {\n    if (this.state.gameOver) {\n      return <FinalPoem gameOver={this.state.gameOver} wholePoem={this.state.wholePoem} newGameCallback={this.newGameCallback}/>\n    } else {\n      return <FinalPoem gameOver={this.state.gameOver} gameOverCallback={this.gameOver}/>\n    }\n  }\n\n  newGameCallback = () => {\n    this.setState({ gameOver: false, prevLine: \"\", wholePoem: [], currPlayer: 1 }); \n  }\n\n  render() {\n\n    const exampleFormat = FIELDS.map((field) => {\n      if (field.key) {\n        return field.placeholder;\n      } else {\n        return field;\n      }\n    }).join(\" \");\n\n    return (\n      <div className=\"Game\">\n        <h2>Game</h2>\n\n        <p>Each player should take turns filling out and submitting the form below. Each turn should be done individually and <em>in secret!</em> Take inspiration from the revealed recent submission. When all players are finished, click the final button on the bottom to reveal the entire poem.</p>\n        <p>Please follow the following format for your poetry submission:</p>\n        <p className=\"Game__format-example\"> { exampleFormat } </p>\n\n        { this.showOrHideRecentSubmission() }\n\n        { this.showOrHidePlayerSubmissionForm() }\n\n        { this.showCorrectFinalPoemSection() }\n\n      </div>\n    );\n  }\n}\n\nconst FIELDS = [\n  \"The\",\n  {\n    key: 'adj1',\n    placeholder: 'adjective',\n  },\n  {\n    key: 'noun1',\n    placeholder: 'noun',\n  },\n  {\n    key: 'adv',\n    placeholder: 'adverb',\n  },\n  {\n    key: 'verb',\n    placeholder: 'verb',\n  },\n  \"the\",\n  {\n    key: 'adj2',\n    placeholder: 'adjective',\n  },\n  {\n    key: 'noun2',\n    placeholder: 'noun',\n  },\n  \".\",\n];\n\nexport default Game;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './components/Game.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App__header\">\n          <h1 className=\"App__title\">Exquisite Corpse</h1>\n          <p className=\"App__intro-text\">\n            Exquisite corpse, also known as exquisite cadaver (from the original French term cadavre exquis), is a method by which a collection of words or images is collectively assembled. Each collaborator adds to a composition in sequence, either by following a rule (e.g. \"The adjective noun adverb verb the adjective noun.\" as in \"The green duck sweetly sang the dreadful dirge.\") or by being allowed to see only the end of what the previous person contributed.\n          </p>\n        </header>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}